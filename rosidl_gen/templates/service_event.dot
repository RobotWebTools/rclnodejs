// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';

{{
  const interfaceName = it.serviceInfo.interfaceName;
  const pkgName = it.serviceInfo.pkgName;
  const subFolder = it.serviceInfo.subFolder;

  const baseName = it.serviceInfo.pkgName + '__' + it.serviceInfo.subFolder + '__' + it.serviceInfo.interfaceName;
}}

const ref = require('@rclnodejs/ref-napi');
const StructType = require('@rclnodejs/ref-struct-di')(ref);
const ArrayType = require('@rclnodejs/ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const ServiceEventInfoWrapper = require('../service_msgs/service_msgs__msg__ServiceEventInfo.js');
const {{=interfaceName}}_RequestWrapper = require('./{{=pkgName}}__{{=subFolder}}__{{=interfaceName}}_Request.js');
const {{=interfaceName}}_ResponseWrapper = require('./{{=pkgName}}__{{=subFolder}}__{{=interfaceName}}_Response.js');
const {{=interfaceName}}_EventRefStruct = StructType({
  info: ServiceEventInfoWrapper.refObjectType,
  request: {{=interfaceName}}_RequestWrapper.refObjectArrayType,
  response: {{=interfaceName}}_ResponseWrapper.refObjectArrayType,
});
const {{=interfaceName}}_EventRefArray = ArrayType({{=interfaceName}}_EventRefStruct);
const {{=interfaceName}}_EventRefStructArray = StructType({
  data: {{=interfaceName}}_EventRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class {{=interfaceName}}_EventWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new {{=interfaceName}}_EventRefStruct(other._refObject.toObject());
      this._wrapperFields.info =  new ServiceEventInfoWrapper(other._wrapperFields.info);
      this._wrapperFields.request = {{=interfaceName}}_RequestWrapper.createArray();
      this._wrapperFields.request.copy(other._wrapperFields.request);
      this._wrapperFields.response = {{=interfaceName}}_ResponseWrapper.createArray();
      this._wrapperFields.response.copy(other._wrapperFields.response);
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new {{=interfaceName}}_EventRefStruct();
    this._wrapperFields.info = new ServiceEventInfoWrapper();
    this._wrapperFields.request = {{=interfaceName}}_RequestWrapper.createArray();
    this._wrapperFields.response = {{=interfaceName}}_ResponseWrapper.createArray();
  }
  static createFromRefObject(refObject) {
    let self = new {{=interfaceName}}_EventWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new {{=interfaceName}}_EventArrayWrapper;
  }
  static get ArrayType() {
    return {{=interfaceName}}_EventArrayWrapper;
  }
  static get refObjectArrayType() {
    return {{=interfaceName}}_EventRefStructArray
  }
  static get refObjectType() {
    return {{=interfaceName}}_EventRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
    }
    this._wrapperFields.info.freeze(own, checkConsistency);
    this._refObject.info = this._wrapperFields.info.refObject;
    this._wrapperFields.request.freeze(own, checkConsistency);
    this._refObject.request = this._wrapperFields.request.refObject;
    this._wrapperFields.response.freeze(own, checkConsistency);
    this._refObject.response = this._wrapperFields.response.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._wrapperFields.info.copyRefObject(refObject.info);
    this._wrapperFields.request.copyRefObject(refObject.request);
    this._wrapperFields.response.copyRefObject(refObject.response);
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    ServiceEventInfoWrapper.freeStruct(refObject.info);
    if (refObject.request.size != 0) {
      {{=interfaceName}}_RequestWrapper.ArrayType.freeArray(refObject.request);
      if ({{=interfaceName}}_RequestWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.request, {{=interfaceName}}_RequestWrapper.refObjectArrayType, 'data');
      }
    }
    if (refObject.response.size != 0) {
      {{=interfaceName}}_ResponseWrapper.ArrayType.freeArray(refObject.response);
      if ({{=interfaceName}}_ResponseWrapper.ArrayType.useTypedArray) {
        // Do nothing, the v8 will take the ownership of the ArrayBuffer used by the typed array.
      } else {
        deallocator.freeStructMember(refObject.response, {{=interfaceName}}_ResponseWrapper.refObjectArrayType, 'data');
      }
    }
  }
  static destoryRawROS(msg) {
    {{=interfaceName}}_EventWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: '{{=pkgName}}', subFolder: '{{=subFolder}}', interfaceName: '{{=interfaceName}}_Event'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get info() {
    return this._wrapperFields.info;
  }
  set info(value) {
    if (value instanceof ServiceEventInfoWrapper) {
      this._wrapperFields.info.copy(value);
    } else {
      this._wrapperFields.info.copy(new ServiceEventInfoWrapper(value));
    }
  }
  get request() {
    return this._wrapperFields.request;
  }
  set request(value) {
    if (value.length > 1) {
      throw new RangeError('The length of array request must be <= 1.');
    }
    this._wrapperFields.request.fill(value);
  }
  get response() {
    return this._wrapperFields.response;
  }
  set response(value) {
    if (value.length > 1) {
      throw new RangeError('The length of array response must be <= 1.');
    }
    this._wrapperFields.response.fill(value);
  }
  copyRefObject(refObject) {
    this._refObject = new {{=interfaceName}}_EventRefStruct(refObject.toObject());
    this._wrapperFields.info.copyRefObject(this._refObject.info);
    this._wrapperFields.request.copyRefObject(this._refObject.request);
    this._wrapperFields.response.copyRefObject(this._refObject.response);
  }
  copy(other) {
    this._refObject = new {{=interfaceName}}_EventRefStruct(other._refObject.toObject());
    this._wrapperFields.info.copy(other._wrapperFields.info);
    this._wrapperFields.request.copy(other._wrapperFields.request);
    this._wrapperFields.response.copy(other._wrapperFields.response);
  }
  static get classType() {
    return {{=interfaceName}}_EventWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"info","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"service_msgs","type":"ServiceEventInfo","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"request","type":{"isArray":true,"arraySize":1,"isUpperBound":true,"isDynamicArray":true,"isFixedSizeArray":false,"pkgName":"{{=pkgName}}","type":"{{=interfaceName}}_Request","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"response","type":{"isArray":true,"arraySize":1,"isUpperBound":true,"isDynamicArray":true,"isFixedSizeArray":false,"pkgName":"{{=pkgName}}","type":"{{=interfaceName}}_Response","stringUpperBound":null,"isPrimitiveType":false},"default_value":null}],"baseType":{"pkgName":"{{=pkgName}}","type":"{{=interfaceName}}_Event","stringUpperBound":null,"isPrimitiveType":false},"msgName":"{{=interfaceName}}_Event"};
  }
  hasMember(name) {
    let memberNames = ["info","request","response"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class {{=interfaceName}}_EventArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof {{=interfaceName}}_EventWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new {{=interfaceName}}_EventWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to {{=interfaceName}}_EventArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to {{=interfaceName}}_EventArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new {{=interfaceName}}_EventRefArray(size);
    this._refObject = new {{=interfaceName}}_EventRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new {{=interfaceName}}_EventWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof {{=interfaceName}}_EventArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "{{=interfaceName}}_EventArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      {{=interfaceName}}_EventWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return {{=interfaceName}}_EventWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return {{=interfaceName}}_EventArrayWrapper;
  }
}
module.exports = {{=interfaceName}}_EventWrapper;

