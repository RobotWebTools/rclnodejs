// This file is automatically generated by rclnodejs
//
// *** DO NOT EDIT directly
//

#include "definitions.hpp"
#include "../../type_conversion.hpp"

{{~ it.includeHeaders : header}}
#include <{{=header}}>
{{~}}

namespace rclnodejs {

{{~ it.messages : message}}
NAN_MODULE_INIT(rclnodejs__{{=message.structType}}::Init) {
  auto clazz = Nan::New<v8::FunctionTemplate>();
  clazz->SetClassName(Nan::New("{{=message.info.interfaceName}}").ToLocalChecked());
  clazz->Set(Nan::New("createRosMessage").ToLocalChecked(), Nan::New<v8::FunctionTemplate>(rclnodejs__{{=message.structType}}::CreateRosMessage));
  clazz->Set(Nan::New("writeRosMessage").ToLocalChecked(), Nan::New<v8::FunctionTemplate>(rclnodejs__{{=message.structType}}::WriteRosMessage));
  clazz->Set(Nan::New("toJsObject").ToLocalChecked(), Nan::New<v8::FunctionTemplate>(rclnodejs__{{=message.structType}}::ToJsObject));
  Nan::Set(target, Nan::New("{{=message.info.interfaceName}}").ToLocalChecked(), Nan::GetFunction(clazz).ToLocalChecked());
}

NAN_METHOD(rclnodejs__{{=message.structType}}::CreateRosMessage) {
  auto* data = {{=message.structType}}__create();
  auto buffer = Nan::NewBuffer(reinterpret_cast<char*>(data), sizeof(*data), [](auto* data, auto) {
    {{=message.structType}}__destroy(reinterpret_cast<{{=message.structType}}*>(data));
  }, nullptr).ToLocalChecked();
  info.GetReturnValue().Set(buffer);
}

NAN_METHOD(rclnodejs__{{=message.structType}}::WriteRosMessage) {
  auto jsObj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
  auto* buffer = node::Buffer::Data(info[1]);
  auto offset = Nan::To<uint32_t>(info[2]).ToChecked();
  auto* msg = reinterpret_cast<{{=message.structType}}*>(buffer + offset);
  auto typesupport = Nan::To<v8::Object>(info[3]).ToLocalChecked();

  try {
  {{~ message.spec.fields : field}}
    {{? !it.isInternalField(field)}}
    [&](){
      auto js_value = Nan::Get(jsObj, Nan::New("{{=field.name}}").ToLocalChecked()).ToLocalChecked();
      {{? field.default_value !== null}}
      if (js_value->IsUndefined()) {
        // default value is initialized when message is created.
        return;
      }
      {{?}}
      {{
    const jsType = it.getJsType(field.type);
      }}
      {{? !field.type.isArray}}
        {{? field.type.isPrimitiveType}}
      msg->{{=field.name}} = ToNativeChecked<decltype(msg->{{=field.name}})>(js_value);
        {{??}}
      auto typesupport_msg = Nan::To<v8::Object>(Nan::Get(typesupport, Nan::New("{{=field.type.pkgName}}/{{=field.type.type}}").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
      auto typesupport_func = Nan::To<v8::Function>(Nan::Get(typesupport_msg, Nan::New("_writeRosMessage").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
      auto {{=field.name}}_js_obj = Nan::Get(jsObj, Nan::New("{{=field.name}}").ToLocalChecked()).ToLocalChecked();
      v8::Local<v8::Value> argv[] = {
        {{=field.name}}_js_obj,
        info[1],
        Nan::New(static_cast<uint32_t>(reinterpret_cast<char*>(&msg->{{=field.name}}) - reinterpret_cast<char*>(msg)))
      };
      Nan::Call(typesupport_func, Nan::New<v8::Object>(), 3, argv).ToLocalChecked();
        {{?}}
      {{??}}
        {{? field.type.isFixedSizeArray}}
          {{? field.type.isPrimitiveType}}
      WriteNativeArray<std::remove_pointer_t<std::decay_t<decltype(msg->{{=field.name}})>>>(js_value, msg->{{=field.name}}, {{=field.type.arraySize}});
          {{??}}
      auto typesupport_msg = Nan::To<v8::Object>(Nan::Get(typesupport, Nan::New("{{=field.type.pkgName}}/{{=field.type.type}}").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
      WriteNativeObjectArray<std::remove_pointer_t<std::decay_t<decltype(msg->{{=field.name}})>>>(js_value, msg->{{=field.name}}, {{=field.type.arraySize}}, info[1], offset, typesupport_msg);
          {{?}}
        {{??}}
      // TODO: handle sequences
        {{?}}
    {{?}}
    }();
  {{?}}
{{~}}
  } catch (const TypeError& e) {
    Nan::ThrowError(Nan::New(e.what_detailed("{{=field.name}}")).ToLocalChecked());
    return;
  } catch (const OutOfRangeError& e) {
    Nan::ThrowError(Nan::New(e.what_detailed("{{=field.name}}")).ToLocalChecked());
    return;
  }
}

NAN_METHOD(rclnodejs__{{=message.structType}}::ToJsObject) {
  auto* buffer = node::Buffer::Data(info[0]);
  uint32_t offset = Nan::To<uint32_t>(info[1]).ToChecked();
  auto* msg = reinterpret_cast<{{=message.structType}}*>(buffer + offset);
  auto typesupport = Nan::To<v8::Object>(info[2]).ToLocalChecked();

  auto js_obj = Nan::New<v8::Object>();
{{~ message.spec.fields : field}}
  {{? !it.isInternalField(field)}}
    {{? !field.type.isArray}}
      {{? field.type.isPrimitiveType}}
  Nan::Set(js_obj, Nan::New("{{=field.name}}").ToLocalChecked(), ToJsChecked(msg->{{=field.name}}));
      {{??}}
  {
    auto typesupport_msg = Nan::To<v8::Object>(Nan::Get(typesupport, Nan::New("{{=field.type.pkgName}}/{{=field.type.type}}").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
    auto typesupport_func = Nan::To<v8::Function>(Nan::Get(typesupport_msg, Nan::New("_toJsObject").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
    v8::Local<v8::Value> argv[] = {
      info[0],
      Nan::New(static_cast<uint32_t>(reinterpret_cast<char*>(&msg->{{=field.name}}) - buffer))
    };
    auto {{=field.name}}_js_obj = Nan::Call(typesupport_func, Nan::New<v8::Object>(), 2, argv).ToLocalChecked();
    Nan::Set(js_obj, Nan::New("{{=field.name}}").ToLocalChecked(), {{=field.name}}_js_obj);
  }
      {{?}}
    {{??}}
      {{? field.type.isFixedSizeArray}}
        {{? field.type.isPrimitiveType}}
  Nan::Set(js_obj, Nan::New("{{=field.name}}").ToLocalChecked(), ToJsArrayChecked(msg->{{=field.name}}, {{=field.type.arraySize}}));
        {{??}}
  {
    auto typesupport_msg = Nan::To<v8::Object>(Nan::Get(typesupport, Nan::New("{{=field.type.pkgName}}/{{=field.type.type}}").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
    Nan::Set(js_obj, Nan::New("{{=field.name}}").ToLocalChecked(), ToJsObjectArrayChecked(msg->{{=field.name}}, {{=field.type.arraySize}}, info[0], offset, typesupport_msg));
  }
        {{?}}
      {{??}}
    // TODO: handle sequences
      {{?}}
    {{?}}
  {{?}}
{{~}}
  info.GetReturnValue().Set(js_obj);
}

{{~}}

NAN_MODULE_WORKER_ENABLED({{=it.pkgName}}, [](auto target) {
{{~ it.messages : message}}
  rclnodejs__{{=message.structType}}::Init(target);
{{~}}
});

} // namespace rclnodejs
