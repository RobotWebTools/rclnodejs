// This file is automatically generated by rclnodejs
//
// *** DO NOT EDIT directly
//

#include "definitions.hpp"
#include "../../type_conversion.hpp"

{{~ it.messages : message}}
#include <{{=it.getRosHeaderField(message.info)}}>
{{~}}

namespace rclnodejs {

{{~ it.messages : message}}
NAN_MODULE_INIT(rclnodejs__{{=message.structType}}::Init) {
  auto clazz = Nan::New<v8::FunctionTemplate>();
  clazz->SetClassName(Nan::New("{{=message.info.interfaceName}}").ToLocalChecked());
  clazz->Set(Nan::New("createRosMessage").ToLocalChecked(), Nan::New<v8::FunctionTemplate>(rclnodejs__{{=message.structType}}::CreateRosMessage));
  clazz->Set(Nan::New("writeRosMessage").ToLocalChecked(), Nan::New<v8::FunctionTemplate>(rclnodejs__{{=message.structType}}::WriteRosMessage));
  clazz->Set(Nan::New("toJsObject").ToLocalChecked(), Nan::New<v8::FunctionTemplate>(rclnodejs__{{=message.structType}}::ToJsObject));
  Nan::Set(target, Nan::New("{{=message.info.interfaceName}}").ToLocalChecked(), Nan::GetFunction(clazz).ToLocalChecked());
}

NAN_METHOD(rclnodejs__{{=message.structType}}::CreateRosMessage) {
  auto* data = {{=message.structType}}__create();
  auto buffer = Nan::NewBuffer(reinterpret_cast<char*>(data), sizeof(*data), [](auto* data, auto) {
    {{=message.structType}}__destroy(reinterpret_cast<{{=message.structType}}*>(data));
  }, nullptr).ToLocalChecked();
  info.GetReturnValue().Set(buffer);
}

NAN_METHOD(rclnodejs__{{=message.structType}}::WriteRosMessage) {
  auto jsObj = Nan::To<v8::Object>(info[0]).ToLocalChecked();
  auto* buffer = node::Buffer::Data(info[1]);
  auto offset = Nan::To<uint32_t>(info[2]).ToChecked();
  auto* msg = reinterpret_cast<{{=message.structType}}*>(buffer + offset);
  auto typesupport = Nan::To<v8::Object>(info[3]).ToLocalChecked();

{{~ message.spec.fields : field}}
{{? !it.isInternalField(field)}}
  {
    auto js_value = Nan::Get(jsObj, Nan::New("{{=field.name}}").ToLocalChecked()).ToLocalChecked();
{{
    const jsType = it.getJsType(field.type);
}}
{{? jsType === 'number'}}
    if (!js_value->IsNumber()) {
      Nan::ThrowError(Nan::New("expected {{=field.name}} to be number").ToLocalChecked());
      info.GetReturnValue().Set(Nan::Undefined());
      return;
    }
{{?? jsType === 'string'}}
    if (!js_value->IsString()) {
      Nan::ThrowError(Nan::New("expected {{=field.name}} to be string").ToLocalChecked());
      info.GetReturnValue().Set(Nan::Undefined());
      return;
    }
{{?? jsType === 'boolean'}}
    if (!js_value->IsBoolean()) {
      Nan::ThrowError(Nan::New("expected {{=field.name}} to be boolean").ToLocalChecked());
      info.GetReturnValue().Set(Nan::Undefined());
      return;
    }
{{?? jsType === 'bigint'}}
    if (!js_value->IsBigInt()) {
      Nan::ThrowError(Nan::New("expected {{=field.name}} to be bigint").ToLocalChecked());
      info.GetReturnValue().Set(Nan::Undefined());
      return;
    }
{{??}}
    if (!js_value->IsObject()) {
      Nan::ThrowError(Nan::New("expected {{=field.name}} to be {{=field.type.type}} object").ToLocalChecked());
      info.GetReturnValue().Set(Nan::Undefined());
      return;
    }
{{?}}
{{? !field.type.isArray}}
{{? field.type.isPrimitiveType}}
    msg->{{=field.name}} = ToNativeChecked<decltype(msg->{{=field.name}})>(js_value);
{{??}}
    {
      auto typesupport_msg = Nan::To<v8::Object>(Nan::Get(typesupport, Nan::New("{{=field.type.pkgName}}/{{=field.type.type}}").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
      auto typesupport_func = Nan::To<v8::Function>(Nan::Get(typesupport_msg, Nan::New("writeRosMessage").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
      auto {{=field.name}}_jsObj = Nan::Get(jsObj, Nan::New("{{=field.name}}").ToLocalChecked()).ToLocalChecked();
      v8::Local<v8::Value> argv[] = {
        {{=field.name}}_jsObj,
        info[1],
        Nan::New(static_cast<uint32_t>(reinterpret_cast<char*>(&msg->{{=field.name}}) - buffer))
      };
      Nan::Call(typesupport_func, Nan::New<v8::Object>(), 3, argv).ToLocalChecked();
    }
{{?}}
{{??}}
    // TODO: handle array types
{{?}}
  }
{{?}}
{{~}}

  info.GetReturnValue().Set(Nan::Undefined());
}

NAN_METHOD(rclnodejs__{{=message.structType}}::ToJsObject) {
  auto* buffer = node::Buffer::Data(info[0]);
  uint32_t offset = Nan::To<uint32_t>(info[1]).ToChecked();
  auto* msg = reinterpret_cast<{{=message.structType}}*>(buffer + offset);
  auto typesupport = Nan::To<v8::Object>(info[2]).ToLocalChecked();

  auto jsObj = Nan::New<v8::Object>();
{{~ message.spec.fields : field}}
{{? !it.isInternalField(field)}}
{{? !field.type.isArray}}
{{? field.type.isPrimitiveType}}
  Nan::Set(jsObj, Nan::New("{{=field.name}}").ToLocalChecked(), ToJsChecked(msg->{{=field.name}}));
{{??}}
  {
    auto typesupport_msg = Nan::To<v8::Object>(Nan::Get(typesupport, Nan::New("{{=field.type.pkgName}}/{{=field.type.type}}").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
    auto typesupport_func = Nan::To<v8::Function>(Nan::Get(typesupport_msg, Nan::New("toJsObject").ToLocalChecked()).ToLocalChecked()).ToLocalChecked();
    v8::Local<v8::Value> argv[] = {
      info[0],
      Nan::New(static_cast<uint32_t>(reinterpret_cast<char*>(&msg->{{=field.name}}) - buffer))
    };
    auto {{=field.name}}_jsObj = Nan::Call(typesupport_func, Nan::New<v8::Object>(), 2, argv).ToLocalChecked();
    Nan::Set(jsObj, Nan::New("{{=field.name}}").ToLocalChecked(), {{=field.name}}_jsObj);
  }
{{?}}
{{??}}
  // TODO: handle array
{{?}}
{{?}}
{{~}}
  info.GetReturnValue().Set(jsObj);
}

{{~}}

NAN_MODULE_WORKER_ENABLED({{=it.pkgName}}, [](auto target) {
{{~ it.messages : message}}
  rclnodejs__{{=message.structType}}::Init(target);
{{~}}
});

} // namespace rclnodejs
